CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = BuildGroundStations

    // Contract title is displayed in the window in the corner, should be short and descriptive
    title = Build a ground station on @/targetBody
	
	// Generic version of the contract title that is displayed in Mission
    // Control when no contract is currently generated
	genericTitle = Build a ground station

    // Reference to a CONTRACT_GROUP node which supplies additional rules for limiting the number of contracts within a given group
    group = Ground Stations

	// Two options for specifying the description:
    // 1) Supply the full text here in the description field
    //description = A more detailed description of the contract.

    // 2) Supply the following fields, which will be fed into the text
    //    generator.  Use of the CoherentContracts mod is highly
    //    recommended, as it generates far more meaningful text.
	// Coherent Contracts hints
    topic 		= Ground Stations	// Topic of the contract
    subject 	= Kerbal  			// Subject of the contract
    //motivation 	= test			// Motivation for why we are doing the contract // Doesn't seem to work at present
	
	// Generic version of the contract description that is displayed in
    // Mission Control when no contract is currently generated
    genericDescription = Let's get transmitting.

    // Give a quick summary of the contract
    synopsis = To help distant Kerbals get in touch with home, let's build a ground station
	
	// Contract notes are displayed under the "Objectives" heading, just above the parameters
    notes = Building ground stations is key to delivering pizza to far flung places. This one might help.

    // The completedMessage is the message that is displayed when the contract completes
    completedMessage = At last we can phone home!

    // Agent (agency)
    //agent = Jebediah Kerman's Junkyard and Spacecraft Parts Co

    // Contract min/max expiry in days.  If both are set to 0.0, it will result in a contract that never expires
    minExpiry = 3.0
    maxExpiry = 12.0	// Quick turnaround

    // When set to true, this contract is automatically accepted when
    // offered.  Use it to make a contract like the stock World-Firsts
    // Record contracts.
    // Default = false
    autoAccept = false

    // The maximum number of times this contract type can be completed (0 being unlimited)
    // Default = 0
    maxCompletions = 0

    // The maximum instances of this specific contract that can be offered at one time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 2

    // Contract rewards. Adjust these values to balance rewards. Remember, the targetBody and Prestige modifiers will also apply behind the scenes
	advanceFunds 		= Random(2500.0,10000.0)
    rewardScience 		= Random(1,5)
    rewardReputation 	= Random(2,10)
    rewardFunds 		= Random(25000.0,100000.0)
    failureReputation 	= Random(1,5) 
    failureFunds 		= Random(2500.0,10000.0)
	
	DATA // Find a suitable body
	{
		type = CelestialBody
		requiredValue = false // Don't worry about this now, see the next DATA node
		
		// Trivial bodies
		trivialBodies = HomeWorld()
		
		// Significant bodies
		significantBodies = HomeWorld().Children().Where(o => o.HaveOrbited()).Random()
		
		// Exceptional Bodies
		exceptionalBodies = OrbitedBodies().Exclude(HomeWorld()).ExcludeAll(HomeWorld().Children()).Where( s => s.HasSurface()).Random()
	}
	
	DATA // Choose a body based on prestige level. If there isn't any at this level the contract won't be offered, this time
	{
		type = CelestialBody
		uniquenessCheck = GROUP_ACTIVE 		// Don't have more than one active contract for the selected body for this contact group
		requiredValue = true 				// We must select a vessel. If not, this acts like a failed REQUIREMENT and the contract won't be offered
		title = Build it here		
		targetBody = Prestige() == Trivial ? @/trivialBodies : Prestige() == Significant ? @/significantBodies : @/exceptionalBodies
	}
	
	DATA // Calculate the distance tolerance for being at the waypoint (we can use this in the PARAMETER message)
	{
		type = int
		toleranceToWaypoint = @/targetBody.HasAtmosphere() ? 5000 : 500
	}
	
	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
		
		RANDOM_WAYPOINT
		{
			// The name of the waypoint - displayed on the marker
			name = Prospective ground station

			// Body for the waypoint - defaulted from the contract if not supplied
			targetBody = @/targetBody

			// The number of waypoints to generate
			count = 1

			// The icon to use when displaying the waypoint
			icon = dish

			// The altitude of the waypoint above the terrain
			altitude = 0.0

			// Whether the waypoint generated can be on water
			waterAllowed = false

			// Force the waypoint to fall along the equator
			forceEquatorial = false
		}
	}
	
	PARAMETER
	{
		name = GroundStation1
		type = VesselParameterGroup
		
		title = Build a ground station on @/targetBody
	
		PARAMETER
		{
			name = All
			type = All
			
			PARAMETER
			{
				name = NewVessel
				type = NewVessel

				// Text for the contract parameter
				title = Build a new vessel to function as a base for the ground station
			}
			
			PARAMETER // Must have a relay antenna. No easy way to set the "right" antenna, so any relay antenna will do
			{
				name = HasAntenna
				type = HasAntenna

				// The minimum antenna power that the vessel must have.
				minAntennaPower = 1.0

				// The maximum antenna power that the vessel can have.
				//maxAntennaPower = 1000.0

				// The type of antenna.
				// Values:
				//     RELAY
				//     TRANSMIT
				antennaType = RELAY

				// Text to use for the parameter's title.
				title = Have a relay antenna
			}
			
			// Next PARAMETER lifted from Bases and Stations Contract Pack
			PARAMETER // Must be able to generate it's own power
			{
				name = Any
				type = Any
				hideChildren = true		
				title = Can generate power
				
				PARAMETER
				{
					name = Solar
					title = Solar
					type = PartValidation
					hideChildren = true
					partModule = ModuleDeployableSolarPanel
					minCount = 1 	     
				}
				
				PARAMETER
				{
					name = Generator
					title = RTG
					type = PartValidation
					hideChildren = true
					partModule = ModuleGenerator
					minCount = 1 
				}
				
				PARAMETER
				{
					name = Generator1
					title = Fuel Cell
					type = PartValidation
					hideChildren = true
					part = FuelCell
					minCount = 1 	
				}
				
				PARAMETER
				{
					name = Generator2
					title = Fuel Cell Array
					type = PartValidation
					hideChildren = true
					part = FuelCellArray
					minCount = 1
				}
				
				PARAMETER:NEEDS[NearFutureSolar]
				{
					name = PartValidationNearFutureSolar
					type = PartValidation
					title = 1 or more curved solar panels
					hideChildren = true
					partModule = ModuleCurvedSolarPanel
					minCount = 1
				}
				
				PARAMETER:NEEDS[NearFutureElectrical]
				{
					name = PartValidationNearFutureReactors
					type = PartValidation
					title = 1 or more fission reactors
					hideChildren = true
					partModule = FissionReactor
					minCount = 1
				}
				
				PARAMETER:NEEDS[NearFutureElectrical]
				{
					name = PartValidationNearFutureRTGs
					type = PartValidation
					title = 1 or more radioisotope generators
					hideChildren = true
					partModule = ModuleRadioisotopeGenerator
					minCount = 1
				}
			}	
		}	

		PARAMETER
		{
			name = VisitWaypoint
			type = VisitWaypoint

			// The index (0-based) in the WaypointGenerator behaviour of the waypoint we wish to reference
			index = 0

			// Distance tolerance to be considered at the waypoint
			// Give the Player a bit more tolerance for planets with an atmosphere (5km), against those which don't (500m)
			distance = @/toleranceToWaypoint

			// Whether the waypoint should get automatically hidden after completing
			// the contract objective
			hideOnCompletion = true

			// Whether to show the "Entering/Leaving $waypointName." messages when a player gets within the
			// distance tolerance of the waypoint
			showMessages = true
			
			// Text to use for the parameter
			// Default:   Location: <waypoint>
			title = Location: Within @/toleranceToWaypoint meters of the waypoint on @/targetBody
		}		

		PARAMETER // Must land successfully
		{
			name = ReachState
			type = ReachState
			
			// The situation to check for.  If multiple situations are provided, will
			// check for any of the situations listed.
			// Values:
			//     ESCAPING
			//     FLYING
			//     LANDED
			//     ORBITING
			//     PRELAUNCH
			//     SPLASHED
			//     SUB_ORBITAL
			situation = LANDED
		}
		
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType

			// Type of vessel to check for
			// Values:
			//   Base
			//   EVA
			//   Lander
			//   Probe
			//   Rover
			//   Ship
			//   Station
			//   SpaceObject
			vesselType = Base

			// Text for the contract parameter
			title = Make sure you rename your new ground station as a Base
		}
	}
}